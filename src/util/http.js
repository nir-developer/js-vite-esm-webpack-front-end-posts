import { HttpError } from "./errors";

// const url = "https://jsonplaceholder.typicode.com/posts";
const url = "http://localhost:8000/posts";

export async function sendDataRequest(data) {
  //Send the  post request and store it in the response variable
  const response = await fetch(url, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(data),
  });

  //Note: even if the request failed - the response (promise) is not null!
  //NOTE: CHECK THE VALUE OF THE responseData - if request failed what will be value
  const responseData = await response.json();

  if (!response.ok) {
    //NOTE - I CAN THROW ANY TYPE OF OBJECT AS AN ERROR!(DONT HAVE TO EXTEND THE ERROR BUILD IN CLASS)
    throw new HttpError(
      response.stats,
      "Sending the request failed",
      responseData
    );
  }

  return responseData;
}

/**SUMMARY - Maxmilain:ASYNC FUNCTION TO SEND A POST REQUEST TO API - TO ADD A NEW POST 
 * 'https://jsonplaceholder.typicode.com/posts
 * 
 * Post object :{
		title: 'New Pirate Captain',
		body: 'Arrrrrr-ent you excited?',
		userId: 3
	}


   NOTE:  id is auto generated by API!
   NOTE: Optional- try to add the Date to the post (as maxmilian did)
   
   -----------------------------------------------------
 * 
 
 * inputs: data(object:)
   
   output: resolved promise - the new created post 
   (after parsing the resolved promise returned  from the API and parse it with json 
          or throwing HttpError(later) 
 */
